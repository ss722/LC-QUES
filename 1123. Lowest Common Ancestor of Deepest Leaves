/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* lcaDeepestLeaves(TreeNode* root) {
        int deep = depth(root);
        return f(root,deep,0);
    }
    TreeNode* f(TreeNode* root,int depth,int curr){
        if(!root) return NULL;
        if(curr == depth-1) return root;

        TreeNode* left = f(root->left,depth,curr+1);
        TreeNode* right= f(root->right,depth,curr+1);

        if(left && right) return root; 
        if(left) return left;
        return right;
    }
    int depth(TreeNode* root){
        if(!root) return 0;
        return 1+max(depth(root->left),depth(root->right)); 
    }
};
