class Solution {
public:
    int m,n;
    int key = 2;
    int dfs(int i,int j ,vector<vector<int>>& grid, vector<vector<bool>>&vis ){
        if(i<0 || i>= m || j<0 || j>=n || vis[i][j] || grid[i][j] != 1) return 0;
        vis[i][j]=true;
         grid[i][j] = key;
        int cnt = 1+ dfs(i+1,j,grid,vis)+dfs(i-1,j,grid,vis)+dfs(i,j+1,grid,vis)+
                  dfs(i,j-1,grid,vis);
           
        return cnt;
    }
    int largestIsland(vector<vector<int>>& grid) {
       m = grid.size();
        n = grid[0].size();
        vector<int> gsize;
        gsize.push_back(0);
        gsize.push_back(0);

        vector<vector<bool>> vis(m,vector<bool>(n,false));
        for(int i=0;i<grid.size();i++){
            for(int j=0;j<grid[0].size();j++){

                if(grid[i][j] == 0 ||  vis[i][j] ) continue;

                int cnt = dfs(i,j,grid,vis);
                gsize.push_back(cnt);
                key++;
            }
        }
        int maxx = 0;bool flag = false;
        for(int i=0;i<grid.size();i++){
            for(int j=0;j<grid[0].size();j++){
                
                if(grid[i][j] == 0){
                    flag = true;
                    unordered_set<int> sett;
                    int up=0,down=0,right=0,left=0;
                    if(i-1 >=0) up=grid[i-1][j];
                    if(i+1 < m) down=grid[i+1][j];
                    if(j-1 >=0) left=grid[i][j-1];
                    if(j+1 < n) right=grid[i][j+1];
                    sett.insert(up);
                    sett.insert(down);
                    sett.insert(left);
                    sett.insert(right);
                    
                    int count = 1; 
                    for (int islandKey : sett)count += gsize[islandKey];
                    maxx = max(maxx, count);
                }
            }
        }

       if(!flag) return n*m;
        return maxx;

        

    }
};
