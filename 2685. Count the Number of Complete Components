class Solution {
public:
    int countCompleteComponents(int n, vector<vector<int>>& edges) {
        vector<vector<int>> adj(n);
        unordered_map<int,vector<int>> mp;
        for(int i=0;i<edges.size();i++){
            adj[edges[i][0]].push_back(edges[i][1]);
            adj[edges[i][1]].push_back(edges[i][0]);
        }
        vector<bool> vis(n,false);
        int group = 1;
        for(int i=0;i<n;i++){
            if(!vis[i]){
                queue<int> q;
                q.push(i);
                while(!q.empty()){
                    int curr = q.front();q.pop();
                    vis[curr] = true;
                    mp[group].push_back(curr);
                    for(auto it:adj[curr]) if(!vis[it]) vis[it] = true, q.push(it);
                }
                group++;
            }
        }
        int ans = 0;
        for(auto [g,v]:mp){
            int calc = v.size()-1;
            bool flag = true;
            for(auto it:v){
                if(adj[it].size() != calc) {flag = false; break;}
            }
            ans += flag;
        }
        ans+= n-adj.size();
        return ans;
    }
};

