class Solution {
public:
    vector<string> findAllRecipes(vector<string>& recipes, vector<vector<string>>& ingredients, vector<string>& supplies) {
        int n = recipes.size();
        unordered_set<string> supply(supplies.begin(),supplies.end());
        vector<int> miss(n,0);
        unordered_map<string,vector<int>> unavail;

        for(int i=0;i<n;i++){
            for(auto it:ingredients[i]){
                if(!supply.count(it))
                {
                    unavail[it].push_back(i);
                    miss[i]++;
                }
            }
        }

        queue<int> q;
        for(int i=0;i<n;i++) if(miss[i]==0) q.push(i);
        vector<string> ans;
        while(!q.empty()){
            int ind = q.front();q.pop();
            ans.push_back(recipes[ind]);
            for(auto it: unavail[recipes[ind]]){
                miss[it]--;
                if(miss[it]==0) q.push(it);
            }
        } 
        return ans;
        

    }
};
