class Solution {
public:
    int n;
    pair<int,int> getind(int curr){
        int i = (curr-1)/n;
        int j= (curr-1)%n;
        if(i%2==1)j = n-1-j;

        return {n-1-i,j};
    }
    
    int snakesAndLadders(vector<vector<int>>& board) {
        n = board.size();
        vector<bool> vis(n*n+1,false);
        queue<pair<int,int>> q;
        q.push({1,0});
        
        while(!q.empty()){
            auto [curr,moves] = q.front();
            q.pop();
            if(curr == n*n) return moves;

            for(int i=1;i<=6 && curr+i<=n*n;i++){
                int newval = curr+i;
                auto [r,c] = getind(newval); 
                if(board[r][c] != -1){
                    newval = board[r][c];
                }
                if(vis[newval] == false){
                    vis[newval] = true;
                    q.push({newval,moves+1});
                }
            }
            
        }
        return -1;
    }    
};
