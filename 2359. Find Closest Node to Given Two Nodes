class Solution {
public:
    void dfs(vector<int>& dist, int currnode,vector<int>& edges,int currdist ){
        while(currnode != -1 && dist[currnode] == -1 ){
            dist[currnode] = currdist++;
            currnode = edges[currnode];
        }
    }
    int closestMeetingNode(vector<int>& edges, int node1, int node2) {
        int n = edges.size();
        vector<int> dist1(n,-1),dist2(n,-1);
        dfs(dist1,node1,edges,0);
        dfs(dist2,node2,edges,0);

        int maxx;
        int ans = -1,minofmax = INT_MAX;

        for(int i=0;i<n;i++){
            if(dist1[i] > -1 && dist2[i]>-1){maxx = max(dist1[i],dist2[i]);
            if(minofmax > maxx){
                ans = i;
                minofmax=maxx;
            }}
        }
        return ans;
        

    }
};
