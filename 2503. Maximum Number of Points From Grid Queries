class Solution {
public:
    vector<int> maxPoints(vector<vector<int>>& grid, vector<int>& queries) {
        int m  = grid.size();
        int n  = grid[0].size();
        int k = queries.size();
        vector<pair<int,int>> q;

        for(int i=0;i<k;i++){
            q.push_back({queries[i],i});
        }
        sort(q.begin(),q.end());
        int ans  = 0;
        vector<vector<bool>> vis(m,vector<bool>(n,false));
        priority_queue<tuple<int,int,int>,vector<tuple<int,int,int>>,greater<>> pq;
        pq.push({grid[0][0],0,0});
        vis[0][0] = true;
        vector<int> ansvec(k);
       
        for(int i=0;i<k;i++){
            while(!pq.empty()){
                auto [curr,x,y] = pq.top();
                if(q[i].first > curr){
                    pq.pop();
                    ans++;
                    if(y-1>=0 && !vis[x][y-1])pq.push({grid[x][y-1],x,y-1}),vis[x][y-1] = true;
                    if(y+1<n && !vis[x][y+1])pq.push({grid[x][y+1],x,y+1}),vis[x][y+1] = true;
                    if(x-1>=0 && !vis[x-1][y])pq.push({grid[x-1][y],x-1,y}),vis[x-1][y] = true;
                    if(x+1<m && !vis[x+1][y])pq.push({grid[x+1][y],x+1,y}),vis[x+1][y] = true;
                }
                else break;
            }
            ansvec[q[i].second] = ans;
        }
        return ansvec;
    }
};
